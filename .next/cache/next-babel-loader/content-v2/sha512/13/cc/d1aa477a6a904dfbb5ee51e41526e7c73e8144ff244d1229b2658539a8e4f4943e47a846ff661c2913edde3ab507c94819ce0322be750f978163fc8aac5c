{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\n\nconst ValidarFormulario = (stateInicial, validar, fn) => {\n  const {\n    0: valores,\n    1: setValores\n  } = useState(stateInicial);\n  const {\n    0: error,\n    1: setError\n  } = useState({});\n  const {\n    0: submitForm,\n    1: setSubmitForm\n  } = useState(false);\n  useEffect(() => {\n    if (submitForm) {\n      const sinError = Object.keys(error).length === 0; //cuando no haya errores\n\n      if (sinError) {\n        //Entonces ejecuta fn\n        fn();\n      }\n\n      setSubmitForm(false);\n    }\n  }, []); //Funcion que guarda los datos que escribe el usuario\n\n  const OnChange = e => {\n    setValores(_objectSpread(_objectSpread({}, valores), {}, {\n      [e.target.name]: [e.target.value]\n    }));\n  }; //Funcion cuando se envía el formulario\n\n\n  const OnSubmit = e => {\n    e.preventDefault();\n    const erroresValidacion = validar(valores);\n    setError(erroresValidacion); //Si hay errores pasa al state de error\n\n    setSubmitForm(true); //Pasa a true para que se ejecute el useEffect\n  }; //Funcion para que desaparezcan los errores de validación mientras se escribe en el form\n\n\n  const OnBlur = e => {\n    e.preventDefault();\n    const erroresValidacion = validar(valores);\n    setError(erroresValidacion);\n  };\n\n  return {\n    valores,\n    error,\n    submitForm,\n    OnChange,\n    OnSubmit,\n    OnBlur\n  };\n};\n\nexport default ValidarFormulario;","map":null,"metadata":{},"sourceType":"module"}